<?php
// $Id$ 

/** 
* @file 
* Base module file for loft_video
*/

/**
 * Implementation of hook_theme
 */
function loft_video_theme($existing, $type, $theme, $path) {
  return array(
    'loft_video_player' => array(
      'arguments' => array('url' => NULL, 'type' => NULL, 'attributes' => NULL, 'flashvars' => NULL),
    ),
  );
}

/**
 * Formats a video player.
 *
 * @param $vars
 * Required keys are:
 * - url: url to the source media
 * - type: currently only "flowplayer"
 * Optional keys are:
 * - attributes ()
 * - flashvars; see http://flowplayer.org/documentation/configuration
 *
 * @return string
 *
 * @ingroup themeable
 */
function theme_loft_video_player($vars) {
  $output = '';
  if ($vars['type'] == 'flowplayer') {
    $fp_path = drupal_get_path('module', 'loft_video') . '/flowplayer';
    
    //add the flowplayer js
    drupal_add_js($fp_path . '/example/flowplayer-3.2.4.min.js');
    drupal_add_css(drupal_get_path('module', 'loft_video') . '/loft_video.css', 'module');
  
    static $fp_index = 1;
    $attributes = array(
      'id' => isset($vars['attributes']['id']) ? $vars['attributes']['id'] : 'flowplayer-' . $fp_index++,
      'class' => isset($vars['attributes']['class']) ? $vars['attributes']['class'] . ' flowplayer' : 'flowplayer',
      'style' => isset($vars['attributes']['style']) ? rtrim($vars['attributes']['style'], '; ') . '; display: block; ' : 'display: block;',
    );
  
    $output .= '<a href="' . $vars['url'] . '" ' . drupal_attributes($attributes) . '></a>' . "\n";
    
    $flashvars = array(
      'src' => '/' . $fp_path . "/flowplayer-3.2.5.swf"
    );
    
    //allow the users to add in some vars
    $flashvars += isset($vars['flashvars']) ? (array)$vars['flashvars'] : array();
    
    $flashvars += array(
      'wmode' => 'transparent',
    );    
    
    $output .= '<script type="text/javascript">
  <!--//--><![CDATA[//><!--
  flowplayer("' . $attributes['id'] . '", ' . drupal_json_encode($flashvars) . ');
  //--><!]]>
</script>' . "\n";
  }
  return $output;
}

/**
 * Implementation of hook_preprocess_node()
 */
function loft_video_preprocess_node(&$vars) {
  $node = $vars['node'];
  $video_types = _loft_video_get_video_types();
  if (in_array($vars['type'], array_keys($video_types))) {
    foreach (_loft_video_get_video_urls($node) as $field => $video_url) {
      
      //add in the width and height to the style
      $style = isset($video_types[$node->type][$field]['style']) ? $video_types[$node->type][$field]['style'] : '';
      $style .= isset($video_types[$node->type][$field]['width']) ? 'width: ' . intval($video_types[$node->type][$field]['width']) . 'px; ' : '';
      $style .= isset($video_types[$node->type][$field]['height']) ? 'height: ' . intval($video_types[$node->type][$field]['height']) . 'px; ' : '';
      
      $vars[$field . '_embed'] = theme('loft_video_player', array(
        'url' => $video_url,
        'type' => isset($video_types[$node->type][$field]['type']) ? $video_types[$node->type][$field]['type'] : 'flowplayerff',
        'attributes' => array(
          'id' => strtolower(preg_replace('/[\W_]+/', '-', 'video-player-' . $node->nid . '-' . $field)),
          'style' => $style,
        ))
      );  
    }
  }
}

/**
 * Get info from other modules about what node types to apply this to
 */
function _loft_video_get_video_types($reset = FALSE) {
  static $video_types = array();
  if (empty($video_types) || $reset) {
    $video_types = module_invoke_all('loft_video');
  }
  return $video_types;
}

/**
 * Get the video paths from a node
 */
function _loft_video_get_video_urls($node) {
  $types = _loft_video_get_video_types();
  $video_urls = array();
  foreach (array_keys($types[$node->type]) as $field) {
    if (isset($node->{$field}['und'][0]['uri'])) {
      $video_urls[$field] = file_create_url($node->{$field}['und'][0]['uri']);  
    }
  }
  return $video_urls;
}